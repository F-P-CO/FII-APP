// Mocks generated by Mockito 5.0.13 from annotations
// in fii_app/test/modules/comparator/presentation/stores/comparator_store_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:fii_app/core/domain/entities/reit.dart' as _i4;
import 'package:fii_app/core/presentation/stores/reit_list_store.dart' as _i3;
import 'package:fii_app/modules/reit_list/domain/entities/reit_list_sort_option.dart'
    as _i6;
import 'package:fii_app/modules/reit_list/domain/usecases/get_all_reits.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeGetAllReits extends _i1.Fake implements _i2.GetAllReits {}

/// A class which mocks [ReitListStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockReitListStore extends _i1.Mock implements _i3.ReitListStore {
  MockReitListStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetAllReits get getAllReits =>
      (super.noSuchMethod(Invocation.getter(#getAllReits),
          returnValue: _FakeGetAllReits()) as _i2.GetAllReits);
  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);
  @override
  set isLoading(bool? _isLoading) =>
      super.noSuchMethod(Invocation.setter(#isLoading, _isLoading),
          returnValueForMissingStub: null);
  @override
  String get errorMessage =>
      (super.noSuchMethod(Invocation.getter(#errorMessage), returnValue: '')
          as String);
  @override
  set errorMessage(String? _errorMessage) =>
      super.noSuchMethod(Invocation.setter(#errorMessage, _errorMessage),
          returnValueForMissingStub: null);
  @override
  List<_i4.Reit> get reits =>
      (super.noSuchMethod(Invocation.getter(#reits), returnValue: <_i4.Reit>[])
          as List<_i4.Reit>);
  @override
  set reits(List<_i4.Reit>? _reits) =>
      super.noSuchMethod(Invocation.setter(#reits, _reits),
          returnValueForMissingStub: null);
  @override
  bool get hasError =>
      (super.noSuchMethod(Invocation.getter(#hasError), returnValue: false)
          as bool);
  @override
  int get totalReits =>
      (super.noSuchMethod(Invocation.getter(#totalReits), returnValue: 0)
          as int);
  @override
  List<_i4.Reit> get reitsSortedByNetWorth =>
      (super.noSuchMethod(Invocation.getter(#reitsSortedByNetWorth),
          returnValue: <_i4.Reit>[]) as List<_i4.Reit>);
  @override
  List<_i4.Reit> get reitsSortedByAssetsAmount =>
      (super.noSuchMethod(Invocation.getter(#reitsSortedByAssetsAmount),
          returnValue: <_i4.Reit>[]) as List<_i4.Reit>);
  @override
  List<_i4.Reit> get reitsSortedByCurrentDividendYield =>
      (super.noSuchMethod(Invocation.getter(#reitsSortedByCurrentDividendYield),
          returnValue: <_i4.Reit>[]) as List<_i4.Reit>);
  @override
  _i5.Future<void> loadReitList() =>
      (super.noSuchMethod(Invocation.method(#loadReitList, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  List<_i4.Reit> getReitsSortedBy(_i6.ReitListSortOptionType? sortType) =>
      (super.noSuchMethod(Invocation.method(#getReitsSortedBy, [sortType]),
          returnValue: <_i4.Reit>[]) as List<_i4.Reit>);
  @override
  String toString() => super.toString();
}
